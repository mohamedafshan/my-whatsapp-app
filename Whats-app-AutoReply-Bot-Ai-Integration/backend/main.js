// === WhatsApp & DB Setup ===
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const db = require('./db/connection');

// === Express API Setup ===
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());

//API Route: Get all WhatsApp messages
app.get('/api/messages', (req, res) => {
  db.query('SELECT * FROM whatsapp_messages ORDER BY id DESC', (err, results) => {
    if (err) {
      console.error('Error fetching messages:', err);
      return res.status(500).json({ error: 'Database error' });
    }
    res.json(results);
  });
});

//Start API Server
app.listen(PORT, () => {
  console.log(`API Server running at http://localhost:${PORT}`);
});

// === WhatsApp Bot Setup ===
const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    headless: true,
    args: ['--no-sandbox'],
  },
});

client.on('qr', (qr) => {
  qrcode.generate(qr, { small: true });
  console.log('Scan the QR code with your WhatsApp');
});

client.on('ready', () => {
  console.log('WhatsApp client is ready!');
});

client.on('message', async (message) => {
  const userMessage = message.body.toLowerCase().trim();
  const sender = message.from;
  console.log(`Received from ${sender}: ${userMessage}`);

  try {
    const customResponses = [
      {
        keywords: ['who are you', 'your name', 'ропро╛ро░рпН роирпА', 'роЙроЩрпНроХ рокрпЗро░рпН', 'роирпА ропро╛ро░рпБ'],
        reply: "ЁЯСЛ роиро╛ройрпН Rubysoft, роЙроЩрпНроХро│рпЛроЯ роЪро┐ройрпНрой but smart assistant!",
      },
      {
        keywords: ['who made you', 'developer', 'ропро╛ро░рпН роЙро░рпБро╡ро╛роХрпНроХро┐ройро╛ро░рпН', 'ропро╛ро░рпН роЪрпЖроЮрпНроЪродрпБ', 'unnai yar padaithathu'],
        reply: "ЁЯСитАНЁЯТ╗ роОройрпИ роЙро░рпБро╡ро╛роХрпНроХро┐ропродрпБ Afshan Ashath, роТро░рпБ Full Stack Developer.",
      },
      {
        keywords: ['who is afshan', 'afshan ashath', 'afshan ропро╛ро░рпН', 'роЕрокрпНро╖ро╛ройрпН ропро╛ро░рпН'],
        reply: "ЁЯСитАНЁЯТ╗ Afshan Ashath роТро░рпБ Full Stack Developer. LinkedIn роЗро▓рпН роЕро╡ро░рпН рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН роХро╛рогро▓ро╛роорпН: https://www.linkedin.com/in/afshan-ashath",
      },
      {
        keywords: ['what is your purpose', 'what can you do', 'роЙройрпН ро╡рпЗро▓рпИ роОройрпНрой', 'роирпА роОройрпНрой роЪрпЖропрпНроп роорпБроЯро┐ропрпБроорпН'],
        reply: "ЁЯдЦ роиро╛ройрпН роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ рокродро┐ро▓рпН роЕро│ро┐роХрпНроХ, родроХро╡ро▓рпНроХро│рпИ рокроХро┐ро░, рооро▒рпНро▒рпБроорпН роЪро┐ро▓ automation ро╡рпЗро▓рпИроХро│рпИ роЪрпЖропрпНроп ро╡роирпНродро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН тАФ Rubysoft роЪро╛ро░рпНрокро╛роХ.",
      }
    ];

    for (let rule of customResponses) {
      if (rule.keywords.some(kw => userMessage.includes(kw))) {
        await client.sendMessage(sender, rule.reply);
        db.query(
          'INSERT INTO whatsapp_messages (sender, user_message, ai_response) VALUES (?, ?, ?)',
          [sender, userMessage, rule.reply],
          (err) => {
            if (err) console.error('Failed to insert custom reply:', err);
            else console.log('Custom reply stored in DB');
          }
        );
        return;
      }
    }

    // Fallback custom message
    const fallback = "ЁЯЩП рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХрпНроХрпБ рокродро┐ро▓рпН роЗро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ ро╡рпЗро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.";
    await client.sendMessage(sender, fallback);
    db.query(
      'INSERT INTO whatsapp_messages (sender, user_message, ai_response) VALUES (?, ?, ?)',
      [sender, userMessage, fallback],
      (err) => {
        if (err) console.error('тЭМ Failed to insert fallback reply:', err);
        else console.log('тЬЕ Fallback reply stored in DB');
      }
    );

  } catch (error) {
    console.error('тЭМ Error:', error.message);
    const failMessage = "тЪая╕П родро▒рпНрокрпЛродрпБ родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок рокро┐ро░роЪрпНроЪройрпИ роЙро│рпНро│родрпБ. родропро╡рпБ роЪрпЖропрпНродрпБ рокро┐ро▒роХрпБ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.";
    await client.sendMessage(sender, failMessage);
  }
});

// тЬЕ Start WhatsApp Bot
client.initialize();
